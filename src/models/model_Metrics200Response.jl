# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""metrics_200_response

    Metrics200Response(;
        var"# HELP"=nothing,
        var"# TYPE"=nothing,
        metric=nothing,
    )

    - var"# HELP"::String : Help text for TorchServe metric.
    - var"# TYPE"::String : Type of TorchServe metric.
    - metric::String : TorchServe application metric.
"""
Base.@kwdef mutable struct Metrics200Response <: OpenAPI.APIModel
    var"# HELP"::Union{Nothing, String} = nothing
    var"# TYPE"::Union{Nothing, String} = nothing
    metric::Union{Nothing, String} = nothing

    function Metrics200Response(var"# HELP", var"# TYPE", metric, )
        OpenAPI.validate_property(Metrics200Response, Symbol("# HELP"), var"# HELP")
        OpenAPI.validate_property(Metrics200Response, Symbol("# TYPE"), var"# TYPE")
        OpenAPI.validate_property(Metrics200Response, Symbol("metric"), metric)
        return new(var"# HELP", var"# TYPE", metric, )
    end
end # type Metrics200Response

const _property_types_Metrics200Response = Dict{Symbol,String}(Symbol("# HELP")=>"String", Symbol("# TYPE")=>"String", Symbol("metric")=>"String", )
OpenAPI.property_type(::Type{ Metrics200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Metrics200Response[name]))}

function check_required(o::Metrics200Response)
    o.var"# HELP" === nothing && (return false)
    o.var"# TYPE" === nothing && (return false)
    o.metric === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Metrics200Response }, name::Symbol, val)
end
